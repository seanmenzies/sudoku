def divide_data(board):
    topleft = [[], []]
    topmid = [[], []]
    topright = [[], []]
    midleft = [[], []]
    midmid = [[], []]
    midright = [[], []]
    botleft = [[], []]
    botmid = [[], []]
    botright = [[], []]
    # iterate through board creating two lists per quadrant: integers and coordinates
    for i, row in enumerate(board):
        for j, square in enumerate(row):
            # quadrants
            if i <= 2 and j <= 2:
                topleft[0].append(square)
                topleft[1].append([j, i])
            if i <= 2 and 3 <= j <= 5:
                topmid[0].append(square)
                topmid[1].append([j, i])
            if i <= 2 and 6 <= j <= 8:
                topright[0].append(square)
                topright[1].append([j, i])
            if 3 <= i <= 5 and j <= 2:
                midleft[0].append(square)
                midleft[1].append([j, i])
            if 3 <= i <= 5 and 3 <= j <= 5:
                midmid[0].append(square)
                midmid[1].append([j, i])
            if 3 <= i <= 5 and 6 <= j <= 8:
                midright[0].append(square)
                midright[1].append([j, i])
            if 6 <= i <= 8 and j <= 2:
                botleft[0].append(square)
                botleft[1].append([j, i])
            if 6 <= i <= 8 and 3 <= j <= 5:
                botmid[0].append(square)
                botmid[1].append([j, i])
            if 6 <= i <= 8 and 6 <= j <= 8:
                botright[0].append(square)
                botright[1].append([j, i])
    # return list of lists
    quadrants = topleft, topmid, topright, midleft, midmid, midright, botleft, botmid, botright
    return quadrants


def find_poss_nums(board, coordinates):
    nums_dict = {}
    quadrants = divide_data(board)
    # iterate through all coordinates, returning a list of possible numbers for each
    for coord in coordinates:
        nums = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
        # convert indexes to x, y format
        x, y = coord[1], coord[0]
        # check row
        for num in board[x]:
            if num in nums:
                nums.remove(num)
        # check column
        column = []
        for row in board:
            column.append(row[y])
        for num in column:
            if num in nums:
                nums.remove(num)
        # check quadrant
        for quad in quadrants:
            if coord in quad[1]:
                for num in quad[0]:
                    if num in nums:
                        nums.remove(num)
            else:
                continue
        # after each iteration, save remaining possible numbers to dict with key = coord, value = poss nums
        nums_dict[f'{coord[1]}{coord[0]}'] = nums
    return nums_dict


def solve_puzzle(board):
    completed = False
    while not completed:
        coord = []
        # convert all 81 square to list of coordinates
        [[coord.append([j, i]) for j, x in enumerate(row) if x == '_'] for i, row in enumerate(board)]
        # pass coordinates into function, returning a dictionary (see above)
        moves = find_poss_nums(board1, coord)
        # check possible numbers. If there is only one, insert into the correct coordinate
        for k, v in moves.items():
            if len(v) == 1:
                board[int(k[0])][int(k[1])] = ''.join(v)
        # count remaining empty squares i.e. with '_' instead of a number
        count = 0
        for row in board:
            for square in row:
                if square == '_':
                    count += 1
        # when no empty squares remain, break loop
        if count == 0:
            completed = True
    # print empty line then completed board
    print('')
    for a in board:
        print(*a)


board1 = [['_', '8', '_', '7', '_', '1', '_', '3', '_'],
          ['4', '_', '9', '_', '_', '_', '_', '_', '_'],
          ['_', '5', '_', '_', '6', '_', '4', '1', '8'],
          ['7', '_', '_', '_', '_', '9', '_', '_', '_'],
          ['8', '_', '_', '6', '1', '_', '5', '_', '_'],
          ['_', '3', '5', '_', '_', '_', '_', '2', '9'],
          ['_', '6', '_', '4', '_', '7', '_', '9', '_'],
          ['1', '_', '_', '_', '_', '8', '_', '_', '4'],
          ['_', '2', '_', '_', '5', '_', '_', '7', '_']]

# print pre-solved board
for a in board1:
    print(*a)
solve_puzzle(board1)
